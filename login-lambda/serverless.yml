service: login-lambda
frameworkVersion: '3'

custom:
  tableName: 'Users'

provider:
  name: aws
  runtime: nodejs16.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          # Resource:
          #   - Fn::GetAtt: [UsersTable, Arn]
          # Resource: !GetAtt UsersTable.Arn
          Resource: '*'

  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  # create:
  #   handler: handlers/createUser.createUser
  #   events:
  #     - http:
  #         path: user
  #         method: post
  #         cors: true
  # get:
  #   handler: handlers/getUser.getUserByGlobalIndex
  #   events:
  #     - http:
  #         path: user
  #         method: get
  #         cors: true
  login:
    handler: handlers/loginUser.loginUser
    events:
      - http:
          path: user/login
          method: post
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
